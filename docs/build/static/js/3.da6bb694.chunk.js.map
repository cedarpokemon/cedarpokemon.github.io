{"version":3,"sources":["components/TagIndexPage.module.css","components/TagPage.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/TagIndexPage.js","components/TagPage.js","routes/tags.js"],"names":["module","exports","TagIndexPage","TagPage","_toConsumableArray","arr","Array","isArray","i","arr2","length","_arrayWithoutHoles","iter","Symbol","iterator","Object","prototype","toString","call","from","_iterableToArray","TypeError","_nonIterableSpread","props","react_default","a","createElement","className","styles","tags","map","tag","key","href","dist_es","name","count","_ref","blogRoot","routes","route","url","ArticleSummary","crawlRoutes","_callee4","root","_ref2","paths","regenerator_default","wrap","_context4","prev","next","cache","crawl","context","crawlingRoutes","sent","resolve","method","urls","abrupt","stop","tagRoutes","compose","withContext","req","objectSpread","tagsRoot","mountpath","withCrawlerPatterns","/:tag","_tag","asyncToGenerator","mark","_callee","_context","t0","getAvailableTagsFromRoutes","t1","t2","_x2","_x3","apply","this","arguments","mount","/","title","getView","_getView","_callee2","_context2","fromPairs","toLowerCase","forEach","data","push","components_TagIndexPage","join","_x4","_x5","getTitle","params","_getView2","_callee3","lowerCaseTag","_context3","find","metaTag","components_TagPage","_x6","_x7","Set","concat"],"mappings":"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","file":"static/js/3.da6bb694.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagIndexPage\":\"TagIndexPage_TagIndexPage__2W7jS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagPage\":\"TagPage_TagPage__xC6qk\"};","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import React from 'react'\r\nimport { Link } from 'react-navi'\r\nimport styles from './TagIndexPage.module.css'\r\n\r\nfunction TagIndexPage(props) {\r\n  return (\r\n    <div className={styles.TagIndexPage}>\r\n      <h1>Tags</h1>\r\n      <ul>\r\n        {props.tags.map(tag =>\r\n          <li key={tag.href}>\r\n            <Link href={tag.href}>{tag.name} ({tag.count})</Link>\r\n          </li>  \r\n        )}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TagIndexPage","import React from 'react'\r\nimport ArticleSummary from './ArticleSummary'\r\nimport styles from './TagPage.module.css'\r\n\r\nfunction TagPage({ blogRoot, name, routes }) {\r\n  return (\r\n    <div className={styles.TagPage}>\r\n      <h1>{name} posts</h1>\r\n      <ul>\r\n        {routes.map(route =>\r\n          <li key={route.url.href}>\r\n            <ArticleSummary blogRoot={blogRoot} route={route} />\r\n          </li>  \r\n        )}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TagPage","import React from 'react'\r\nimport { compose, crawl, mount, resolve, route, withContext, withCrawlerPatterns } from 'navi'\r\nimport { join } from 'path'\r\nimport { fromPairs } from 'lodash'\r\nimport TagIndexPage from '../components/TagIndexPage'\r\nimport TagPage from '../components/TagPage'\r\nimport routes from './index'\r\n\r\nasync function crawlRoutes(root) {\r\n  if (!crawlRoutes.cache[root]) {\r\n    let { paths } = await crawl({\r\n      context: {\r\n        crawlingRoutes: true,\r\n      },\r\n      root,\r\n      routes,\r\n    })\r\n    crawlRoutes.cache[root] = await resolve({\r\n      method: 'HEAD',\r\n      routes,\r\n      urls: paths,\r\n    }) \r\n  }\r\n  return crawlRoutes.cache[root]\r\n}\r\ncrawlRoutes.cache = {}\r\n\r\nconst tagRoutes = compose(\r\n  withContext((req, context) => ({\r\n    ...context,\r\n    tagsRoot: req.mountpath,\r\n  })),\r\n  withCrawlerPatterns({\r\n    '/:tag': async (req, context) => {\r\n      if (!context.crawlingRoutes) {\r\n        return getAvailableTagsFromRoutes(\r\n          await crawlRoutes(context.blogRoot)\r\n        ).map(tag => '/'+tag)\r\n      }\r\n      return []\r\n    }\r\n  }),\r\n  mount({\r\n    '/': route({\r\n      title: 'Tags',\r\n\r\n      getView: async (req, context) => {\r\n        // Build a list of pages for each tag\r\n        let routes = await crawlRoutes(context.blogRoot)\r\n        let tags = getAvailableTagsFromRoutes(routes)\r\n        let tagRoutes = fromPairs(tags.map(name => [name.toLowerCase(), []]))\r\n        routes.forEach(route => {\r\n          let data = route.data\r\n          if (data && data.tags) {\r\n            data.tags.forEach(tag => {\r\n              tag = tag.toLowerCase()\r\n              if (tagRoutes[tag]) {\r\n                tagRoutes[tag].push(route)\r\n              }\r\n            })\r\n          }\r\n        })\r\n\r\n        return (\r\n          <TagIndexPage\r\n            blogRoot={context.blogRoot}\r\n            tags={tags.map(name => ({\r\n              name,\r\n              href: join(req.mountpath, name.toLowerCase()),\r\n              count: (tagRoutes[name] || []).length,\r\n            }))}\r\n          />\r\n        )\r\n      },\r\n    }),\r\n\r\n    '/:tag': route({\r\n      getTitle: req => req.params.tag,\r\n      getView: async (req, context) => {\r\n        let lowerCaseTag = req.params.tag.toLowerCase()\r\n        let routes = await crawlRoutes(context.blogRoot)\r\n\r\n        // Build a list of pages that include the tag from the site map\r\n        let tagRoutes = []\r\n        routes.forEach(route => {\r\n          let tags = (route.data && route.data.tags) || []\r\n          if (tags.find(metaTag => metaTag.toLowerCase() === lowerCaseTag)) {\r\n            tagRoutes.push(route)\r\n          }\r\n        })\r\n\r\n        return (\r\n          <TagPage\r\n            blogRoot={context.blogRoot}\r\n            name={req.params.tag}\r\n            routes={tagRoutes}\r\n          />\r\n        )\r\n      },\r\n    }),\r\n  }),\r\n)\r\n\r\nfunction getAvailableTagsFromRoutes(routes) {\r\n  return Array.from(\r\n    new Set(\r\n      [].concat(...routes.map(route => (route.data && route.data.tags) || [])),\r\n    ),\r\n  )\r\n}\r\n\r\nexport default tagRoutes\r\n"],"sourceRoot":""}